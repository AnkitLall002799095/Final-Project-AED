/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.User;

import Business.Apartment.Apartment;
import Business.Apartment.ApartmentDirectory;
import Application.Utils.AppSystem;
import Application.Utils.DatabaseUtils;
import java.sql.*;
import Application.Utils.Helper;
import Business.Property.Property;
import Business.Property.PropertyDirectory;
import Business.Request.UserRequest;
import Business.Request.UserRequestDirectory;
import UserInterface.Main.WorkAreaContPanel;
import static UserInterface.User.UserDefaultJPanel.requestCounter;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.*;

/**
 *
 * @author hmitt
 */
public class ListingViewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ListingViewJPanel
     */
    WorkAreaContPanel workAreaPanel;
    ApartmentDirectory aptList;
    PropertyDirectory propList;
    UserRequestDirectory reqList;
    
    public static void main(String[] args) {
        
        
    }
    
    public ListingViewJPanel(WorkAreaContPanel workAreaPanel) {
        initComponents();
        aptList = DatabaseUtils.getAptListFromDB();
        propList = DatabaseUtils.getPropListFromDB();
        reqList = DatabaseUtils.getRequestListFromDB();  
        
        this.workAreaPanel=workAreaPanel;     
        populateListingTable();
        populateRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel WelcomjLabel = new javax.swing.JLabel();
        AptListjLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AptListjTable = new javax.swing.JTable();
        BookAptjButton = new javax.swing.JButton();
        ViewDetailsjButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        UserRequestjTable = new javax.swing.JTable();
        RequestListjLabel = new javax.swing.JLabel();

        WelcomjLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WelcomjLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        WelcomjLabel.setText("Welcome to Apartment listing wizard!");

        AptListjLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AptListjLabel.setText("Apartment list:-");

        AptListjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Apartment no.", "Building", "Type", "Management company", "Size", "Availability date", "Street", "Community", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(AptListjTable);

        BookAptjButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BookAptjButton.setText("Book");
        BookAptjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BookAptjButtonActionPerformed(evt);
            }
        });

        ViewDetailsjButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ViewDetailsjButton.setText("View details");
        ViewDetailsjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewDetailsjButtonActionPerformed(evt);
            }
        });

        UserRequestjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Request ID", "Building No.", "Apartment No.", "Management company", "Request type", "Request status", "Last updated"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(UserRequestjTable);

        RequestListjLabel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RequestListjLabel.setText("My requests:-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RequestListjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
                                        .addComponent(AptListjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ViewDetailsjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BookAptjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(214, 214, 214)
                        .addComponent(WelcomjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(WelcomjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AptListjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(ViewDetailsjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BookAptjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addComponent(RequestListjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void BookAptjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BookAptjButtonActionPerformed
        // TODO add your handling code here:
        
        int selectedRow[] = AptListjTable.getSelectedRows();
        
        if (selectedRow.length == 0) {
            JOptionPane.showMessageDialog(BookAptjButton, "Please select a row!");
            return;
        }

        else if (selectedRow.length>1) {
            JOptionPane.showMessageDialog(BookAptjButton, "Please select only 1 row!");
            return;
        }

        else {
            
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) AptListjTable.getModel();
            Apartment myApt = new Apartment();
            for (int i=0;i<selectedRow.length;i++){
                myApt = (Apartment) model.getValueAt(selectedRow[i], 0);
            }
            
            for (Property p : propList.getPropList()){
                if (p.getPropId()==myApt.getAptPropId())
                    myApt.setProp(p);
            }
            
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            Date date = new Date();
            String statusDate = formatter.format(date);
            
            UserRequest newReq = reqList.addNewProfile();
            newReq.setRequestId(requestCounter++);
            newReq.setPropId(myApt.getAptPropId());
            newReq.setAptId(myApt.getAptId());
            newReq.setMgmtId(myApt.prop.getMgtComp());
            newReq.setRequestType("Lease");
            newReq.setStatus("Pending");
            newReq.setLastMdfdDate(statusDate);
            newReq.setUserId(123);
            
            try{
                
                Connection conn= DatabaseUtils.getConnection();
                Statement st = conn.createStatement();
                st.executeUpdate("INSERT INTO `aedfinalproject`.`user_application_request` (`Request_Id`, `Prop_Id`, `Apt_Id`, `Mgmt_Comp_Id`, `Request_Type`, `Status`, `Last_Mdfd_Date`, `User_Id`) VALUES ('" + newReq.getRequestId() + "','" + newReq.getPropId() + "','" + newReq.getAptId() + "','" + newReq.getMgmtId() + "','" + newReq.getRequestType() + "','" + newReq.getStatus() + "','" + newReq.getLastMdfdDate() + "','" + newReq.getUserId()+ "')");
                
                populateRequestTable();
                
            }
            catch(Exception e){
                System.out.println(e);
            }
            
            JOptionPane.showMessageDialog(BookAptjButton, "Apartment booking request placed!");
            return;
        }
        
    }//GEN-LAST:event_BookAptjButtonActionPerformed

    private void ViewDetailsjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewDetailsjButtonActionPerformed
        // TODO add your handling code here:
        
        int selectedRow[] = AptListjTable.getSelectedRows();
        
        if (selectedRow.length == 0) {
            JOptionPane.showMessageDialog(ViewDetailsjButton, "Please select a row to view!");
            return;
        }

        else if (selectedRow.length>1) {
            JOptionPane.showMessageDialog(ViewDetailsjButton, "Please select only 1 row to view!");
            return;
        }

        else {
            
            javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) AptListjTable.getModel();
            
            for (int i=0;i<selectedRow.length;i++){
                Apartment apt = (Apartment) model.getValueAt(selectedRow[i], 0);
                workAreaPanel.setRightPanel(new AptDetailsJPanel(workAreaPanel, apt, reqList));
            }

        }
        
    }//GEN-LAST:event_ViewDetailsjButtonActionPerformed

    public void populateListingTable(){
        
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) AptListjTable.getModel();
        model.setRowCount(0);
        
        for (Apartment a : aptList.getAptList()) {
            
            Object[] row = new Object[9];
            row[0] = a;
            row[1] = a.prop.getPropName();
            row[2] = a.getType();
            row[3] = a.prop.getMgtComp();
            row[4] = a.getSize();
            row[5] = a.getAvlblDate();
            row[6] = a.prop.getStreet();
            row[7] = a.prop.getCommunity();
            row[8] = a.prop.getCity();
            
            model.addRow(row);
        }
            
    }
    
    public void populateRequestTable(){
        
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) UserRequestjTable.getModel();
        model.setRowCount(0);
        
        for (UserRequest u : reqList.getReqList()){
            
            Object[] row = new Object[7];
            row[0] = u.getRequestId();
            row[1] = u.getPropId();
            row[2] = u.getAptId();
            row[3] = u.getMgmtId();
            row[4] = u.getRequestType();
            row[5] = u.getStatus();
            row[6] = u.getLastMdfdDate();
            
            model.addRow(row);
            
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AptListjLabel;
    private javax.swing.JTable AptListjTable;
    private javax.swing.JButton BookAptjButton;
    private javax.swing.JLabel RequestListjLabel;
    private javax.swing.JTable UserRequestjTable;
    private javax.swing.JButton ViewDetailsjButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
